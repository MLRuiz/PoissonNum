function [x,y,Phi,c]=fluxCDT(m,t,f,g)
%% Especificaciones
% Aproxima, por medio de diferencias finitas, la ecuaci\'on de Laplace
% tranciente con condiciones de Dirichlet en las
% fronteras. En un cuadrado de [0,1]x[0,1]. Que se mueve en el tiempo
% de 0 a 1.
% m n\'umero de puntos de la malla
% f funci\'on de velocidad
% g condiciones de frontera
% Phi potencial
% t puntos en el tiempo
% si c=d/(h*h)<1 el esquema es estable.
% Martha Leticia Ruiz Zavala. Noviembre 2016
% Ejemplo: [x,y,Phi,c]=fluxCDT(5,1000,@f,@g);

%% Inicialización
close all
h=1/(m-1);
Phi=zeros(m,m,t);
T=linspace(0,1,t);
dt = T(2)-T(1);
c=dt/(h*h);
if c>1
    h = msgbox('El esquema es inestable, cosas extrañas pueden suceder', 'dt/(h^2)>1','warn');
end
[x,y,Phi0]=fluxCD(m,f,g);
% Condiciones iniciales
Phi(:,:,1)=Phi0;

%% Calculamos con un paso de tiempo hacia adelante
for k=2:t
    % Puntos no contiguos a la frontera
    for j=3:(m-2)
        for i=3:(m-2)
            Phi(i,j,k)=Phi(i,j,k-1)+c*(Phi(i-1,j,k-1)+Phi(i+1,j,k-1)+...
                Phi(i,j-1,k-1)+ Phi(i,j+1,k-1)-4*Phi(i,j,k-1)+...
                f([x(i,j),y(i,j)],(k-2)*dt)*h*h);
        end
    end
    % Puntos contiguos a las fronteras verticales
    for i=2:(m-1)
        % Izquierda
        j=2;
        Phi(i,j,k)=c*(g([x(i,1),y(i,1)],(k-2)*dt)+Phi(i+1,j,k-1)-...
            4*Phi(i,j,k-1)+f([x(i,j),y(i,j)],(k-2)*dt)*h*h)+Phi(i,j,k-1);
        if(i==2) % esquina superior izquierda
            Phi(i,j,k)=Phi(i,j,k)+c*(g([x(1,2),y(1,2)],(k-2)*dt)+...
                Phi(i,j-1,k-1));
        elseif (i==(m-1)) % esquina inferior izquierda
            Phi(i,j,k)=Phi(i,j,k)+c*(Phi(i,j+1,k-1)+...
                g([x(m,2),y(m,2)],(k-2)*dt));
        else % rellenito
            Phi(i,j,k)=Phi(i,j,k)+c*(Phi(i,j-1,k-1)+Phi(i,j+1,k-1));
        end
        % Derecha
        j=m-1;
        Phi(i,j,k)=c*(Phi(i-1,j,k-1)+g([x(i,m),y(i,m)],(k-2)*dt)-...
            4*Phi(i,j,k-1)+f([x(i,j),y(i,j)],(k-2)*dt)*h*h)+Phi(i,j,k-1);
        if(i==2) % esquina superior derecha
            Phi(i,j,k)=Phi(i,j,k)+c*(g([x(1,m-1),y(1,m-1)],(k-2)*dt)...
                +Phi(i,j-1,k-1));
        elseif (i==(m-1)) % esquina inferior derecha
            Phi(i,j,k)=Phi(i,j,k)+c*(Phi(i,j+1,k-1)+...
                g([x(m,m-1),y(m,m-1)],(k-2)*dt));
        else % rellenito
            Phi(i,j,k)=Phi(i,j,k)+c*(Phi(i,j-1,k-1)+Phi(i,j+1,k-1));
        end
    end
    
    % Puntos contiguos a las fronteras horizontales
    for j=3:m-2
        % Inferior
        i=m-1;
        Phi(i,j,k)=c*(Phi(i-1,j,k-1)+Phi(i,j+1,k-1)+Phi(i+1,j,k-1)+...
            g([x(m,j),y(m,j)],(k-2)*dt)-4*Phi(i,j,k-1)+...
            f([x(i,j),y(i,j)],(k-2)*dt)*h*h)+Phi(i,j,k-1);
        % Superior
        i=2;
        Phi(i,j,k)=c*(Phi(i-1,j,k-1)+g([x(1,j),y(1,j)],(k-2)*dt)+...
            Phi(i+1,j,k-1)+Phi(i,j-1,k-1)-4*Phi(i,j,k-1)+...
            f([x(i,j),y(i,j)],(k-2)*dt)*h*h)+Phi(i,j,k-1);
    end
    % Condiciones en la frontera
    % Orilla izquierda
    for i=1:m
        Phi(i,1,k)=g([x(i,1),y(i,1)],(k-1)*dt);
    end
    % Orilla inferior
    for j=1:m
        Phi(m,j,k)=g([x(m,j),y(m,j)],(k-1)*dt);
    end
    % Orilla derecha
    for i=1:m
        Phi(i,m,k)=g([x(i,m),y(i,m)],(k-1)*dt);
    end
    % Orilla superior
    for j=1:m
        Phi(1,j,k)=g([x(1,j),y(1,j)],(k-1)*dt);
    end
end
%% Graficamos la soluci\'on
for k=1:t
    surf(x,y,Phi(:,:,k));pause(.4);
end
end
