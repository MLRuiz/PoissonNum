function [x,y,Phi,c]=fluxeleDT(m,ml,t,f,g)
%% Especificaiones
% Aproxima, por medio de diferencias finitas, la ecuaci\'on de Laplace
% con condiciones de Dirichlet en las fronteras.
% En un dominio en forma de L en el cuadrado
% [0,1]x[0,1]. Que se mueve en el tiempo de 0 a 1
% m,ml n\'umero puntos de la parte exterior e interior de la L
% m>ml
% f funci\'on de velocidad
% g condiciones de frontera
% t puntos en el tiempo
% si c=d/(h*h)<1 el esquema es estable.
% Martha Leticia Ruiz Zavala. Noviembre 2016
% Ejemplo: [x,y,Phi,c]=fluxeleDT(50,20,10000,@f,@g);

%% Inicialización
close all;
h=1/(m-1);
Phi=zeros(m,m,t);
T=linspace(0,1,t);
dt = T(2)-T(1);
c=dt/(h*h);
if c>1
    h = msgbox('El esquema es inestable, cosas extrañas pueden suceder', 'dt/(h^2)>1','warn');
end
% Condiciones iniciales
[x,y,Phi0]=fluxeleD(m,ml,f,g);
Phi(:,:,1)=Phi0;

%% Calculamos con un paso de tiempo hacia delante
for k=2:t
    % Puntos no contiguos a la frontera
    % Primer bloque de la L
    for j=3:(m-ml+1)
        for i=3:(ml-2)
            Phi(i,j,k)=Phi(i,j,k-1)+c*(Phi(i-1,j,k-1)+Phi(i,j+1,k-1)+...
                Phi(i+1,j,k-1)+Phi(i,j-1,k-1)-4*Phi(i,j,k-1)+...
                f([x(i,j),y(i,j)],(k-2)*dt)*h*h);
        end
    end
    % Pedazo rebelde entre ellos (con punto volador)
    for i=3:(ml-1)
        j=m-ml+2;
        Phi(i,j,k)=Phi(i,j,k-1)+c*(Phi(i-1,j,k-1)+Phi(i,j+1,k-1)+...
            Phi(i+1,j,k-1)+Phi(i,j-1,k-1)-4*Phi(i,j,k-1)+...
            f([x(i,j),y(i,j)],(k-2)*dt)*h*h);
    end
    % Segundo bloque de la L
    for j=(m-ml+3):(m-2)
        for i=3:(m-2)
            Phi(i,j,k)=Phi(i,j,k-1)+c*(Phi(i-1,j,k-1)+Phi(i,j+1,k-1)+...
                Phi(i+1,j,k-1)+Phi(i,j-1,k-1)-4*Phi(i,j,k-1)+...
                f([x(i,j),y(i,j)],(k-2)*dt)*h*h);
        end
    end
    %% Puntos contiguos a las fronteras verticales
    % Lado izquierdo, primera parte
    for i=2:(ml-1), 
        j=2;
        Phi(i,j,k)=Phi(i,j,k-1)+c*(g([x(i,1),y(i,1)],(k-2)*dt)+...
            Phi(i,j+1,k-1)-4*Phi(i,j,k-1)+f([x(i,j),y(i,j)],(k-2)*dt)*h*h);
        if (i==2) % esquina superior
            Phi(i,j,k)=Phi(i,j,k)+c*(g([x(1,2),y(1,2)],(k-2)*dt)+...
                Phi(i+1,j,k-1));
        elseif (i==(ml-1)) % esquina inferior
            Phi(i,j,k)=Phi(i,j,k)+c*(Phi(i-1,j,k-1)+...
                g([x(ml,2),y(ml,2)],(k-2)*dt));
        else
            Phi(i,j,k)=Phi(i,j,k)+c*(Phi(i-1,j,k-1)+Phi(i+1,j,k-1));
        end
    end
    % Lado izquierdo, segunda parte
    for i=ml:(m-1)
        j=m-ml+2;
        Phi(i,j,k)=Phi(i,j,k-1)+c*(g([x(i,m-ml+1),y(i,m-ml+1)],(k-2)*dt)+...
            Phi(i-1,j,k-1)+Phi(i,j+1,k-1)-4*Phi(i,j,k-1)+...
            f([x(i,j),y(i,j)],(k-2)*dt)*h*h);
        if (i==(m-1)) % esquina inferior
            Phi(i,j,k)=Phi(i,j,k)+c*(g([x(m,j),y(m,j)],(k-2)*dt));
        else
            Phi(i,j,k)=Phi(i,j,k)+c*(Phi(i+1,j,k-1));
        end
    end
    % Lado derecho
    for i=2:m-1
        j=m-1;
        Phi(i,j,k)=Phi(i,j,k-1)+c*(Phi(i,j-1,k-1)+...
            g([x(i,m),y(i,m)],(k-2)*dt)-4*Phi(i,j,k-1)+...
            f([x(i,j),y(i,j)],(k-2)*dt)*h*h);
        if (i==2) % esquina superior
            Phi(i,j,k)=Phi(i,j,k)+c*(g([x(1,m-1),y(1,m-1)],(k-2)*dt)+...
                Phi(i+1,j,k-1));
        elseif (i==(m-1)) % esquina inferior
            Phi(i,j,k)=Phi(i,j,k)+c*(Phi(i-1,j,k-1)+...
                g([x(m,m-1),y(m,m-1)],(k-2)*dt));
        else
            Phi(i,j,k)=Phi(i,j,k)+c*(Phi(i-1,j,k-1)+Phi(i+1,j,k-1));
        end
    end
    
    % Puntos contiguos a las fronteras horizontales
    % Lado superior
    for j=3:(m-2)
        i=2;
        Phi(i,j,k)=Phi(i,j,k-1)+c*(Phi(i,j-1,k-1)+...
            g([x(1,j),y(1,j)],(k-2)*dt)+Phi(i,j+1,k-1)+Phi(i+1,j,k-1)-...
            4*Phi(i,j,k-1)+f([x(i,j),y(i,j)],(k-2)*dt)*h*h);
    end
    
    % Lado inferior, primera parte
    for j=3:(m-ml+1)
        i=ml-1;
        Phi(i,j,k)=Phi(i,j,k-1)+c*(Phi(i,j-1,k-1)+Phi(i-1,j,k-1)+...
            Phi(i,j+1,k-1)+g([x(ml,j),y(ml,j)],(k-2)*dt)-4*Phi(i,j,k-1)+...
            f([x(i,j),y(i,j)],(k-2)*dt)*h*h);
    end
    
    % Lado inferior, segunda parte
    for j=m-ml+3:m-2
        i=m-1;
        Phi(i,j,k)=Phi(i,j,k-1)+c*(Phi(i,j-1,k-1)+Phi(i-1,j,k-1)+...
            Phi(i,j+1,k-1)+g([x(m,j),y(m,j)],(k-2)*dt)-4*Phi(i,j,k-1)+...
            f([x(i,j),y(i,j)],(k-2)*dt)*h*h);
    end
 % Condiciones a la frontera
    % Frontera izquierda
    % Primera parte
    for i=1:ml
        Phi(i,1,k)=g([x(i,1),y(i,1)],(k-1)*dt);
    end
    % Segunda parte
    for i=ml:m
        Phi(i,m-ml+1,k)=g([x(i,m-ml+1),y(i,m-ml+1)],(k-1)*dt);
    end
    
    % Frontera inferior
    % Primera parte
    for j=1:m-ml+1
        Phi(ml,j,k)=g([x(ml,j),y(ml,j)],(k-1)*dt);
    end
    % Segunda parte
    for j=m-ml+1:m
        Phi(m,j,k)=g([x(m,j),y(m,j)],(k-1)*dt);
    end
    
    % Frontera derecha
    for i=1:m
        Phi(i,m,k)=g([x(i,m),y(i,m)],(k-1)*dt);
    end
    
    % Frontera superior
    for j=1:m
        Phi(1,j,k)=g([x(1,j),y(1,j)],(k-1)*dt);
    end
end
%% Graficamos ls soluci\'on
 for k=2:t  
     h=surf(x(1:m,m-ml+1:m),y(1:m,m-ml+1:m),Phi(1:m,m-ml+1:m,k));
     set(h, 'xdata', x(1:m,m-ml+1:m), 'ydata', y(1:m,m-ml+1:m), 'zdata', Phi(1:m,m-ml+1:m))
     drawnow
	hold on;
    title('ele Transiente')
    axis([0 1 0 1 0 20])
	h=surf(x(1:ml,1:m),y(1:ml,1:m),Phi(1:ml,1:m,k)); 
     set(h, 'xdata', x(1:ml,1:m), 'ydata', y(1:ml,1:m), 'zdata', Phi(1:ml,1:m,k))
     drawnow
     axis([0 1 0 1 0 20])
     pause(.2)
    hold off;
end
end
